"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[642],{3905:(e,a,n)=>{n.d(a,{Zo:()=>d,kt:()=>k});var r=n(7294);function o(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function t(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?t(Object(n),!0).forEach((function(a){o(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,r,o=function(e,a){if(null==e)return{};var n,r,o={},t=Object.keys(e);for(r=0;r<t.length;r++)n=t[r],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(r=0;r<t.length;r++)n=t[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),l=function(e){var a=r.useContext(p),n=a;return e&&(n="function"==typeof e?e(a):s(s({},a),e)),n},d=function(e){var a=l(e.components);return r.createElement(p.Provider,{value:a},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},u=r.forwardRef((function(e,a){var n=e.components,o=e.mdxType,t=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=l(n),u=o,k=c["".concat(p,".").concat(u)]||c[u]||m[u]||t;return n?r.createElement(k,s(s({ref:a},d),{},{components:n})):r.createElement(k,s({ref:a},d))}));function k(e,a){var n=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var t=n.length,s=new Array(t);s[0]=u;var i={};for(var p in a)hasOwnProperty.call(a,p)&&(i[p]=a[p]);i.originalType=e,i[c]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<t;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9608:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>t,metadata:()=>i,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const t={},s="Primeros pasos",i={unversionedId:"burger-queen-api/guides/GETTING-STARTED-DOCKER",id:"burger-queen-api/guides/GETTING-STARTED-DOCKER",title:"Primeros pasos",description:"Una vez creado tu fork y clonado el repo en tu computadora, antes de poder",source:"@site/docs/04-burger-queen-api/guides/GETTING-STARTED-DOCKER.md",sourceDirName:"04-burger-queen-api/guides",slug:"/burger-queen-api/guides/GETTING-STARTED-DOCKER",permalink:"/bootcamp/docs/burger-queen-api/guides/GETTING-STARTED-DOCKER",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/04-burger-queen-api/guides/GETTING-STARTED-DOCKER.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Burger Queen - API con Node.js",permalink:"/bootcamp/docs/burger-queen-api/"},next:{title:"Primeros pasos con MongoDB",permalink:"/bootcamp/docs/burger-queen-api/guides/GETTING-STARTED-MONGODB"}},p={},l=[{value:"1. Instalar <code>docker</code> y <code>docker-compose</code>",id:"1-instalar-docker-y-docker-compose",level:2},{value:"2. Configurar &quot;servicio&quot; de base de datos",id:"2-configurar-servicio-de-base-de-datos",level:2},{value:"3. Configurar conexi\xf3n a BBDD en &quot;servicio&quot; node",id:"3-configurar-conexi\xf3n-a-bbdd-en-servicio-node",level:2},{value:"4. Iniciar, re-iniciar y parar los servicios con <code>docker-compose</code>",id:"4-iniciar-re-iniciar-y-parar-los-servicios-con-docker-compose",level:2},{value:"5. Familiarizarte con administraci\xf3n de contenedores",id:"5-familiarizarte-con-administraci\xf3n-de-contenedores",level:2},{value:"6. Opcionalmente, instalar interfaz gr\xe1fica para administrar data",id:"6-opcionalmente-instalar-interfaz-gr\xe1fica-para-administrar-data",level:2},{value:"7. Corre las pruebas de integraci\xf3n (e2e)",id:"7-corre-las-pruebas-de-integraci\xf3n-e2e",level:2}],d={toc:l},c="wrapper";function m(e){let{components:a,...n}=e;return(0,o.kt)(c,(0,r.Z)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"primeros-pasos"},"Primeros pasos"),(0,o.kt)("p",null,"Una vez creado tu fork y clonado el repo en tu computadora, antes de poder\ncomenzar a codear, tenemos primero que crear nuestro ",(0,o.kt)("em",{parentName:"p"},"entorno de desarrollo"),".\nPara ello te recomendamos seguir los pasos a continuaci\xf3n:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#1-instalar-docker-y-docker-compose"},"1. Instalar ",(0,o.kt)("inlineCode",{parentName:"a"},"docker")," y ",(0,o.kt)("inlineCode",{parentName:"a"},"docker-compose"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#2-configurar-servicio-de-base-de-datos"},'2. Configurar "servicio" de base de datos')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#3-configurar-conexi%C3%B3n-a-bbdd-en-servicio-node"},'3. Configurar conexi\xf3n a BBDD en "servicio" node')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#4-iniciar-re-iniciar-y-parar-los-servicios-con-docker-compose"},"4. Iniciar, re-iniciar y parar los servicios con ",(0,o.kt)("inlineCode",{parentName:"a"},"docker-compose"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#5-familiarizarte-con-admisitraci%C3%B3n-de-contenedores"},"5. Familiarizarte con administraci\xf3n de contenedores")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#6-opcionalmente-instalar-interfaz-gr%C3%A1fica-para-administrar-data"},"6. Opcionalmente, instalar interfaz gr\xe1fica para administrar data")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#7-corre-las-pruebas-de-integraci%C3%B3n-e2e"},"7. Corre las pruebas de integraci\xf3n (e2e)"))),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"1-instalar-docker-y-docker-compose"},"1. Instalar ",(0,o.kt)("inlineCode",{parentName:"h2"},"docker")," y ",(0,o.kt)("inlineCode",{parentName:"h2"},"docker-compose")),(0,o.kt)("p",null,"Independientemente de qu\xe9 base datos elijas, en este proyecto vamos a ejecutar\nlocalmente (en nuestra computadora) el servidor de bases de datos usando\n",(0,o.kt)("em",{parentName:"p"},"contenedores")," de Docker en vez de instalar el programa directamente en nuestra\ncomputadora. Adem\xe1s vamos a usar tambi\xe9n la herramienta ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose")," para\n",(0,o.kt)("em",{parentName:"p"},"orquestar")," nuestros contenedores: bases de datos y servidor web (node)."),(0,o.kt)("p",null,"En los siguientes links puedes ver c\xf3mo instalar ",(0,o.kt)("inlineCode",{parentName:"p"},"docker")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose")," en\ntu sistema opetativo."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/get-docker/"},"Get Docker")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.docker.com/compose/install/"},"Install Docker Compose"))),(0,o.kt)("h2",{id:"2-configurar-servicio-de-base-de-datos"},'2. Configurar "servicio" de base de datos'),(0,o.kt)("p",null,"El boilerplate de este proyecto incluye un archivo\n",(0,o.kt)("a",{parentName:"p",href:"./docker-compose.yml"},(0,o.kt)("inlineCode",{parentName:"a"},"docker-compose.yml"))," que ya contiene parte de la\nconfiguraci\xf3n de ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose"),". En este archivo veremos que hay listados 2\nservicios: ",(0,o.kt)("inlineCode",{parentName:"p"},"db")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"node"),". Nuestra aplicaci\xf3n va a consistir de dos servidores:\nun servidor de bases de datos (el servicio ",(0,o.kt)("inlineCode",{parentName:"p"},"db"),") y un servidor web implementado\nen Node.js (el servicio ",(0,o.kt)("inlineCode",{parentName:"p"},"node"),")."),(0,o.kt)("p",null,"En la secci\xf3n correspondiente al servicio ",(0,o.kt)("inlineCode",{parentName:"p"},"db")," hay 3 cosas importantes que\ntendremos que completar:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Qu\xe9 ",(0,o.kt)("em",{parentName:"li"},"imagen")," (",(0,o.kt)("inlineCode",{parentName:"li"},"image"),") queremos usar. Im\xe1genes recomendadas:\n",(0,o.kt)("a",{parentName:"li",href:"https://hub.docker.com/_/mongo"},"mongo"),",\n",(0,o.kt)("a",{parentName:"li",href:"https://hub.docker.com/_/postgres"},"postgres")," y\n",(0,o.kt)("a",{parentName:"li",href:"https://hub.docker.com/_/mysql"},"mysql"),"."),(0,o.kt)("li",{parentName:"ul"},"Qu\xe9 vol\xfamenes (",(0,o.kt)("inlineCode",{parentName:"li"},"volumes"),"), archivos o carpetas, queremos mapear al\ncontenedor, como por ejemplo el directorio de datos (la carpeta donde la\nbase de datos guardar\xe1 sus archivos)."),(0,o.kt)("li",{parentName:"ul"},"Las variables de entorno (",(0,o.kt)("inlineCode",{parentName:"li"},"environment"),") necesarias para configurar nuestra\nbase de datos y usuarios. Estos datos nos van a servir despu\xe9s para\nconfigurar la conexi\xf3n desde Node.js.")),(0,o.kt)("p",null,"Ejemplo de servicio ",(0,o.kt)("inlineCode",{parentName:"p"},"db")," usando ",(0,o.kt)("a",{parentName:"p",href:"https://hub.docker.com/_/mongo"},"MongoDB"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"db:\n  image: mongo:4\n  volumes:\n    - ./db-data:/data/db\n  environment:\n    MONGO_INITDB_ROOT_USERNAME: bq\n    MONGO_INITDB_ROOT_PASSWORD: secret\n  restart: always\n  networks:\n    - private\n")),(0,o.kt)("p",null,"Ejemplo de servicio ",(0,o.kt)("inlineCode",{parentName:"p"},"db")," usando ",(0,o.kt)("a",{parentName:"p",href:"https://hub.docker.com/_/postgres"},"PostgreSQL"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"db:\n  image: postgres:13\n  volumes:\n    - ./db-data:/var/lib/postgresql/data\n  environment:\n    POSTGRES_PASSWORD: secret\n  restart: always\n  networks:\n    - private\n")),(0,o.kt)("p",null,"Ejemplo de servicio ",(0,o.kt)("inlineCode",{parentName:"p"},"db")," usando ",(0,o.kt)("a",{parentName:"p",href:"https://hub.docker.com/_/mysql"},"MySQL"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"db:\n  image: mysql:5\n  volumes:\n    - ./db-data:/var/lib/mysql\n  environment:\n    MYSQL_ROOT_PASSWORD: supersecret\n    MYSQL_DATABASE: bq\n    MYSQL_USER: bq\n    MYSQL_PASSWORD: secret\n  restart: always\n  networks:\n    - private\n")),(0,o.kt)("h2",{id:"3-configurar-conexi\xf3n-a-bbdd-en-servicio-node"},'3. Configurar conexi\xf3n a BBDD en "servicio" node'),(0,o.kt)("p",null,"Ahora que ya tenemos la configuraci\xf3n del ",(0,o.kt)("em",{parentName:"p"},"servicio")," ",(0,o.kt)("inlineCode",{parentName:"p"},"db"),", tenemos que\ncompletar la configuraci\xf3n del ",(0,o.kt)("em",{parentName:"p"},"servicio")," de Node.js. En particular nos\ninteresa establecer el valor de la variable de entorno ",(0,o.kt)("inlineCode",{parentName:"p"},"DB_URL"),", donde\ntendremos que poner el ",(0,o.kt)("em",{parentName:"p"},"connection string")," correspondiente a nuestra base de\ndatos. Este ",(0,o.kt)("em",{parentName:"p"},"string")," de conexi\xf3n sigue el formato de URL y se ve as\xed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"protocol://username:password@host:port/dbname?opt1=val1&...\n")),(0,o.kt)("p",null,"Ac\xe1 sustituiremos ",(0,o.kt)("inlineCode",{parentName:"p"},"protocol")," con el nombre del protocolo de la base de datos\nelegida (",(0,o.kt)("inlineCode",{parentName:"p"},"mongodb"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"postgresql")," o ",(0,o.kt)("inlineCode",{parentName:"p"},"mysql"),") y ",(0,o.kt)("inlineCode",{parentName:"p"},"username"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"password")," y\n",(0,o.kt)("inlineCode",{parentName:"p"},"dbname")," con los valores usados en la configuraci\xf3n del servicio ",(0,o.kt)("inlineCode",{parentName:"p"},"db")," en el\npunto anterior. En este caso el valor de ",(0,o.kt)("inlineCode",{parentName:"p"},"host")," ser\xe1 ",(0,o.kt)("inlineCode",{parentName:"p"},"db"),", que es el nombre\ndel servicio de base de datos en la configuraci\xf3n de ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," y\npodemos referirnos a \xe9l por su nombre en la red interna entre los\ncontenedores. Siguiendo con los ejemplos del punto anterior, la variable\n",(0,o.kt)("inlineCode",{parentName:"p"},"DB_URL")," en ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," se ver\xeda as\xed:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"MongoDB:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"DB_URL: mongodb://bq:secret@db:27017/bq?authSource=admin\n"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"PostgreSQL:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"DB_URL: postgresql://postgres:secret@db:5432/postgres?schema=public\n"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"MySQL:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"DB_URL: mysql://bq:secret@db:3306/bq\n")))),(0,o.kt)("h2",{id:"4-iniciar-re-iniciar-y-parar-los-servicios-con-docker-compose"},"4. Iniciar, re-iniciar y parar los servicios con ",(0,o.kt)("inlineCode",{parentName:"h2"},"docker-compose")),(0,o.kt)("p",null,"Ahora que ya tenemos nuestra configuraci\xf3n de ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose")," lista, veamos\nc\xf3mo podemos ",(0,o.kt)("em",{parentName:"p"},"levantar")," la aplicaci\xf3n. Para eso usamos el comando\n",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose up")," dentro de la carpeta de nuestro proyecto (donde est\xe1 el\narchivo ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml"),")."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose up\n")),(0,o.kt)("p",null,"Para interrumpir el comando y que el terminal nos devuelva el ",(0,o.kt)("em",{parentName:"p"},"prompt"),", usa\n",(0,o.kt)("inlineCode",{parentName:"p"},"Ctrl + C"),"."),(0,o.kt)("p",null,"Si usamos el comando as\xed, sin opciones, esto levantar\xe1 todos los servicios\ndescritos en el ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml"),". Alternativamente podemos arrancar un\nservicio en particular agregando el nombre del servicio en el comando. Por\nejemplo, si queremos levantar s\xf3lo la base de datos:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose up db\n")),(0,o.kt)("p",null,"Tambi\xe9n tenemos la opci\xf3n de arrancar los servicios y que corran en el ",(0,o.kt)("em",{parentName:"p"},"fondo"),",\ncomo ",(0,o.kt)("em",{parentName:"p"},"daemons"),", con la opci\xf3n ",(0,o.kt)("inlineCode",{parentName:"p"},"-d"),", de forma que inmediatamente se nos devuelve\nel ",(0,o.kt)("em",{parentName:"p"},"prompt")," y los servicios quedan corriendo."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose up -d\n")),(0,o.kt)("p",null,"Adem\xe1s del comando ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose up"),", que construye, (re)crea, arranca, y\nse conecta a los contenedores de unos servicios, tambi\xe9n tenemos disponibles\ncomandos para iniciar (",(0,o.kt)("inlineCode",{parentName:"p"},"start"),"), reiniciar (",(0,o.kt)("inlineCode",{parentName:"p"},"restart"),") y parar (",(0,o.kt)("inlineCode",{parentName:"p"},"stop"),")\nservicios con contenedores ya existentes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose start\ndocker-compose stop\ndocker-compose restart\n")),(0,o.kt)("p",null,"Al igual que con ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose up"),", con estos otros comandos tambi\xe9n podemos\nespecificar con qu\xe9 ",(0,o.kt)("em",{parentName:"p"},"servicio")," queremos interactuar (o con todos en caso de no\nespecificarlo). Por ejemplo, para inicar, reiniciar y despu\xe9s parar el servidor\nde bases de datos:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose start db\ndocker-compose stop db\ndocker-compose restart db\n")),(0,o.kt)("h2",{id:"5-familiarizarte-con-administraci\xf3n-de-contenedores"},"5. Familiarizarte con administraci\xf3n de contenedores"),(0,o.kt)("p",null,"Adem\xe1s de los comandos que ya hemos visto de ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose"),", te recomendamos\nfamiliarizarte con estos otros comandos (entre otros) para poder ",(0,o.kt)("em",{parentName:"p"},"administrar"),"\ntus contenedores."),(0,o.kt)("p",null,"El comando ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose ps")," nos muestra un listado con los contenedores\n",(0,o.kt)("em",{parentName:"p"},"activos"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose ps\n")),(0,o.kt)("p",null,"Tambi\xe9n podemos listar ",(0,o.kt)("em",{parentName:"p"},"todos")," los contenedores, incluyendo los que est\xe1n\ndetenidos usando la opci\xf3n ",(0,o.kt)("inlineCode",{parentName:"p"},"-a"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose ps -a\n")),(0,o.kt)("p",null,"Para borrar los contenedores de los servicios:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose rm\n")),(0,o.kt)("p",null,"Al igual que con los comandos anteriores, tambi\xe9n podemos borrar los\ncontenedores de un servicio en particular indicando su nombre:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose rm db\n")),(0,o.kt)("p",null,"Finalmente, cuando corremos nuestros servicios en el fondo, como ",(0,o.kt)("em",{parentName:"p"},"daemons"),", para\nconectarnos a los contenedores y ver los ",(0,o.kt)("em",{parentName:"p"},"logs")," podemos usar:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose logs\n")),(0,o.kt)("p",null,"Podemos agregar tambi\xe9n la opci\xf3n ",(0,o.kt)("inlineCode",{parentName:"p"},"-f")," para hacer ",(0,o.kt)("em",{parentName:"p"},"streaming")," de los logs y\nquedarnos ",(0,o.kt)("em",{parentName:"p"},"escuchando"),", as\xed como especificar un servicio en particular. Por\nejemplo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose logs -f db\n")),(0,o.kt)("p",null,"Recuerda que siempre puedes consultar la ",(0,o.kt)("em",{parentName:"p"},"ayuda")," de ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose")," con el\nsucomando ",(0,o.kt)("inlineCode",{parentName:"p"},"help"),". Por ejemplo, si queremos ver la ayuda del subcomando ",(0,o.kt)("inlineCode",{parentName:"p"},"up"),",\npodr\xedamos hacer esto:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose help up\n")),(0,o.kt)("h2",{id:"6-opcionalmente-instalar-interfaz-gr\xe1fica-para-administrar-data"},"6. Opcionalmente, instalar interfaz gr\xe1fica para administrar data"),(0,o.kt)("p",null,"A la hora de trabajar con bases de datos es muy com\xfan usar alg\xfan tipo de\ninterfaz gr\xe1fica que nos permita ver y manipular visualmente nuestra data.\nHay opciones para cada base de datos. Recomendamos las siguientes:\n",(0,o.kt)("a",{parentName:"p",href:"https://www.mongodb.com/products/compass"},"Compass")," (MongoDB),\n",(0,o.kt)("a",{parentName:"p",href:"https://www.mysql.com/products/workbench/"},"Workbench")," (MySQL),\n",(0,o.kt)("a",{parentName:"p",href:"https://www.pgadmin.org/"},"pgAdmin")," (PostgreSQL)."),(0,o.kt)("p",null,"Si quieres usar este tipo de herramientas (como ",(0,o.kt)("inlineCode",{parentName:"p"},"Compass")," o ",(0,o.kt)("inlineCode",{parentName:"p"},"WorkBench"),"), es\nprobable que tengas que hacer que tu base de datos sea visible fuera de\ndocker. Para ello puedes mapear el puerto de la base datos en el contenedor a\nalg\xfan puerto que est\xe9 libre en el host de docker (normalmente tu\ncomputadora). Normalmente vamos a mapear estos puertos est\xe1ndar (por ejemplo\n",(0,o.kt)("inlineCode",{parentName:"p"},"27017")," para MongoDB) a otros n\xfameros de puerto distintos ya que estos\nprogramas y/o sus puertos ya podr\xedan estar en uso. Por ejemplo, si usamos\nMongoDB, podr\xedamos agregar el siguiente mapeo de puertos al servico ",(0,o.kt)("inlineCode",{parentName:"p"},"db")," en\nnuestro ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"ports:\n  - 28017:27017\n")),(0,o.kt)("p",null,"Al listar los puertos de un contenedor o servicio en ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," ten\nen cuenta que el n\xfamero de la derecha es el puerto en el contenedor (red\nprivada de docker), mientras que el n\xfamero de la izquierda es el puerto en\nhost de docker (normalmente nuestra computadora - ",(0,o.kt)("inlineCode",{parentName:"p"},"127.0.0.1")," o ",(0,o.kt)("inlineCode",{parentName:"p"},"localhost"),").\nEn el ejemplo de arriba estamos ",(0,o.kt)("em",{parentName:"p"},"mapeando")," el puerto ",(0,o.kt)("inlineCode",{parentName:"p"},"27017")," del contenedor\nal puerto ",(0,o.kt)("inlineCode",{parentName:"p"},"28017")," del host de docker."),(0,o.kt)("p",null,"Si est\xe1s usando PostgreSQL o MySQL, los puertos que nos interesar\xeda mapear\nser\xedan el ",(0,o.kt)("inlineCode",{parentName:"p"},"5432")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"3306")," respectivamente."),(0,o.kt)("p",null,"Si estamos ",(0,o.kt)("em",{parentName:"p"},"exponiendo")," el puerto en nuestra computadora (el ",(0,o.kt)("em",{parentName:"p"},"host"),"), adem\xe1s\ntendr\xe1s tambi\xe9n que conectar el contenedor ",(0,o.kt)("inlineCode",{parentName:"p"},"db")," a la red ",(0,o.kt)("em",{parentName:"p"},"p\xfablica"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"networks:\n  - public\n  - private\n")),(0,o.kt)("p",null,"Despu\xe9s de este cambio podr\xe1s acceder usando ",(0,o.kt)("inlineCode",{parentName:"p"},"127.0.0.1")," o ",(0,o.kt)("inlineCode",{parentName:"p"},"localhost")," y el\npuerto al que hemos mapeado, ",(0,o.kt)("inlineCode",{parentName:"p"},"28017")," en este ejemplo."),(0,o.kt)("p",null,"Si eliges ",(0,o.kt)("a",{parentName:"p",href:"https://www.pgadmin.org/"},"pgAdmin")," (PostgreSQL), la opci\xf3n m\xe1s\nf\xe1cil es usar pgAdmin como contenedor y agregarlo como un nuevo servicio a\nnuestro ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml"),". Por ejemplo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"pgadmin:\n  image: dpage/pgadmin4\n  restart: always\n  environment:\n    PGADMIN_DEFAULT_EMAIL: user@domain.com\n    PGADMIN_DEFAULT_PASSWORD: secret\n  ports:\n    - 8088:80\n  networks:\n    - public\n    - private\n")),(0,o.kt)("p",null,"NOTA: Para conectar desde pgAdmin usando un contenedor, usa el ",(0,o.kt)("em",{parentName:"p"},"nombre")," del\ncontenedor de la base datos (ie: ",(0,o.kt)("inlineCode",{parentName:"p"},"XXX-001-burger-queen-api_db_1"),") como nombre\nde host para que pgAdmin se pueda conectar a trav\xe9s de la red ",(0,o.kt)("em",{parentName:"p"},"privada"),"."),(0,o.kt)("h2",{id:"7-corre-las-pruebas-de-integraci\xf3n-e2e"},"7. Corre las pruebas de integraci\xf3n (e2e)"),(0,o.kt)("p",null,"El ",(0,o.kt)("em",{parentName:"p"},"boilerplate")," de este proyecto ya incluye pruebas ",(0,o.kt)("inlineCode",{parentName:"p"},"e2e")," (end-to-end) o de\n",(0,o.kt)("em",{parentName:"p"},"integraci\xf3n"),", que se encargan de probar nuestra aplicaci\xf3n en conjunto,\natrav\xe9s de la interfaz HTTP. A diferencia de las pruebas unitarias, en vez\nde importar o requerir un m\xf3dulo y probar una funci\xf3n de forma aislada, lo que\nvamos a hacer es arrancar toda la aplicaci\xf3n, y probarla tal como se usar\xeda en\nel mundo real, para ello la aplicaci\xf3n de prueba necesitar\xe1 una base de datos y\nescuchar en un puerto de red."),(0,o.kt)("p",null,"Para correr pruebas e2e sobre instancia local podemos usar:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"npm run test:e2e\n")),(0,o.kt)("p",null,"Esto levanta la aplicaci\xf3n con ",(0,o.kt)("inlineCode",{parentName:"p"},"npm start")," y corre los tests contra la URL de\nesta instancia (por defecto ",(0,o.kt)("inlineCode",{parentName:"p"},"http://127.0.0.1:8080"),"). Esto asume que la base de\ndatos est\xe1 disponible."),(0,o.kt)("p",null,"Alternativamente, y quiz\xe1s m\xe1s f\xe1cil de usar, podemos tambi\xe9n levantar nuestra\naplicaci\xf3n usando ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose"),", o incluso en producci\xf3n, y despu\xe9s correr\nlas pruebas ",(0,o.kt)("inlineCode",{parentName:"p"},"e2e")," pasando la URL de la aplicaci\xf3n en la variable de entorno\n",(0,o.kt)("inlineCode",{parentName:"p"},"REMOTE_URL"),". Por ejemplo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"REMOTE_URL=http://127.0.0.1:8080 npm run test:e2e\n")),(0,o.kt)("p",null,"Al especificar ",(0,o.kt)("inlineCode",{parentName:"p"},"REMOTE_URL"),", los tests no tratar\xe1n de ",(0,o.kt)("em",{parentName:"p"},"levantar")," un servidor\nlocal sino que usar\xe1n directamente la URL provista asumiendo que la aplicaci\xf3n\nest\xe1 disponible en dicha URL. Esto nos permite probar tambi\xe9n contra URLs\nremotas. Por ejemplo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"REMOTE_URL=https://api.my-super-app.com npm run test:e2e\n")))}m.isMDXComponent=!0}}]);